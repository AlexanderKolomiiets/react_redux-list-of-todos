{"version":3,"sources":["api.ts","types/Status.ts","app/hooks.ts","features/currentTodo.ts","components/TodoList/TodoList.tsx","features/filter.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","features/todos.ts","App.tsx","app/store.ts","index.tsx"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Status","useAppDispatch","useDispatch","useAppSelector","useSelector","actions","todo","type","payload","currentTodoReducer","state","action","TodoList","dispatch","todos","currentTodo","status","filter","query","compareInput","title","inputValue","includes","toLowerCase","visibleTodos","useMemo","completed","ACTIVE","COMPLETED","className","map","classNames","id","onClick","currentTodoActions","initialState","ALL","filterSlice","createSlice","name","reducers","TodoFilter","handleQuery","queryInfo","filterActions","value","onChange","event","statusInfo","handleStatus","target","placeholder","style","pointerEvents","Loader","TodoModal","useState","user","setUser","fetchUser","a","useEffect","userId","href","email","todosSlice","add","forEach","item","push","App","isLoading","setIsLoading","fetchData","todoActions","store","configureStore","reducer","filterReducer","todosReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.abc154c5.chunk.js","sourcesContent":["import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum Status {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Status } from '../../types/Status';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector((state) => state.todos);\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n  const status = useAppSelector((state) => state.filter.status);\n  const query = useAppSelector((state) => state.filter.query);\n\n  const compareInput = (\n    title: string,\n    inputValue: string,\n  ) => title.includes(inputValue.toLowerCase());\n\n  const visibleTodos = useMemo(() => {\n    return todos.filter(({ completed, title }) => {\n      switch (status) {\n        case Status.ACTIVE:\n          return !completed && compareInput(title, query);\n\n        case Status.COMPLETED:\n          return completed && compareInput(title, query);\n\n        default:\n          return compareInput(title, query);\n      }\n    });\n  }, [todos, status, query]);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {visibleTodos.map(todo => (\n          <tr\n            key={todo.id}\n            data-cy=\"todo\"\n            className={classNames({\n              'has-background-info-light': currentTodo?.id === todo.id,\n            })}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={classNames({\n                  'has-text-success': todo.completed,\n                  'has-text-danger': !todo.completed,\n                })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              {currentTodo?.id === todo.id ? (\n                <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye-slash\" />\n                  </span>\n                </button>\n              ) : (\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => dispatch(currentTodoActions.setTodo(todo))}\n                >\n                  <span className=\"icon\">\n                    <i className=\"far fa-eye\" />\n                  </span>\n                </button>\n              )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Status } from '../types/Status';\n\ntype State = {\n  query: string;\n  status: Status;\n};\n\nconst initialState: State = {\n  query: '',\n  status: Status.ALL,\n};\n\nconst filterSlice = createSlice({\n  name: 'filter',\n  initialState,\n  reducers: {\n    status: (state, action: PayloadAction<Status>) => (\n      { ...state, status: action.payload }\n    ),\n    query: (state, action: PayloadAction<string>) => (\n      { ...state, query: action.payload }\n    ),\n  },\n});\n\nexport default filterSlice.reducer;\nexport const { actions } = filterSlice;\n","import { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const status = useAppSelector(state => state.filter.status);\n  const query = useAppSelector(state => state.filter.query);\n\n  const handleStatus = (statusInfo: Status | string) => {\n    switch (statusInfo) {\n      case Status.ACTIVE:\n        return dispatch(filterActions.status(Status.ACTIVE));\n\n      case Status.COMPLETED:\n        return dispatch(filterActions.status(Status.COMPLETED));\n\n      default:\n        return dispatch(filterActions.status(Status.ALL));\n    }\n  };\n\n  const handleQuery = (queryInfo: string) => {\n    dispatch(filterActions.query(queryInfo));\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={event => handleStatus(event.target.value)}\n          >\n            <option value={Status.ALL}>All</option>\n            <option value={Status.ACTIVE}>Active</option>\n            <option value={Status.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => handleQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            <button\n              data-cy=\"clearSearchButton\"\n              aria-label=\"button\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => handleQuery('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { useEffect, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [user, setUser] = useState<User | null>(null);\n\n  const fetchUser = async (id: number) => {\n    try {\n      setUser(await getUser(id));\n    } catch {\n      setUser(null);\n    }\n  };\n\n  useEffect(() => {\n    if (!currentTodo) {\n      return;\n    }\n\n    fetchUser(currentTodo.userId);\n  }, [currentTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(currentTodoActions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Todo } from '../types/Todo';\n\nconst initialState: Todo[] = [];\n\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    add: (todos, action: PayloadAction<Todo[]>) => {\n      action.payload.forEach((item => todos.push(item)));\n    },\n  },\n});\n\nexport default todosSlice.reducer;\nexport const { actions } = todosSlice;\n","import { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { getTodos } from './api';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todoActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const fetchData = async () => {\n    try {\n      const todos = await getTodos();\n\n      dispatch(todoActions.add(todos));\n    } catch {\n      dispatch(todoActions.add([]));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nexport const store = configureStore({\n  reducer: {\n    currentTodo: currentTodoReducer,\n    filter: filterReducer,\n    todos: todosReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport { store } from './app/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}